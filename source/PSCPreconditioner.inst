#ifndef PSCPRECONDITIONER_INST
#define PSCPRECONDITIONER_INST
#include <GenericLinearAlgebra.h>

template class PSCPreconditioner<2, LA::MPI::Vector, double, true>;
template class PSCPreconditioner<2, LA::MPI::Vector, float, true>;

template class PSCPreconditioner<3, LA::MPI::Vector, double, true>;
template class PSCPreconditioner<3, LA::MPI::Vector, float, true>;

template class PSCPreconditioner<2, LA::MPI::Vector, double, false>;
template class PSCPreconditioner<2, LA::MPI::Vector, float, false>;

template class PSCPreconditioner<3, LA::MPI::Vector, double, false>;
template class PSCPreconditioner<3, LA::MPI::Vector, float, false>;


#ifndef MATRIXFREE
// D = dim ; P = fe degree ; T = value type ; S = same diagonal
#undef I
#define I(D,P,T,S) template void PSCPreconditioner<D, LA::MPI::Vector, T, S>::initialize(MWOperator<D, P, T> const&, PSCPreconditioner<D, LA::MPI::Vector, T, S>::AdditionalData const&)

I(2,1,double,true);I(2,2,double,true);I(2,3,double,true);I(2,4,double,true);
I(2,1,double,false);I(2,2,double,false);I(2,3,double,false);I(2,4,double,false);
I(3,1,double,true);I(3,2,double,true);I(3,3,double,true);I(3,4,double,true);
I(3,1,double,false);I(3,2,double,false);I(3,3,double,false);I(3,4,double,false);
#undef I

#else // MATRIXFREE ON
// D = dim ; P = fe degree ; T = value type ; S = same diagonal
#undef I
#define I(D,P,T,S) template void PSCPreconditioner<D, LA::MPI::Vector, T, S>::initialize(MFOperator<D, P, P+1, T> const&, PSCPreconditioner<D, LA::MPI::Vector, T, S>::AdditionalData const&)

I(2,1,double,true);I(2,2,double,true);I(2,3,double,true);I(2,4,double,true);
I(2,1,double,false);I(2,2,double,false);I(2,3,double,false);I(2,4,double,false);
I(3,1,double,true);I(3,2,double,true);I(3,3,double,true);I(3,4,double,true);
I(3,1,double,false);I(3,2,double,false);I(3,3,double,false);I(3,4,double,false);
#undef I

#endif // MATRIXFREE
#endif // PSCPRECONDITIONER_INST
